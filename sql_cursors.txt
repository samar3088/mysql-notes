CURSORS : (runs in open and close)

1. Its a way to fetch Query results. 
2. The issue with loop is that we keep on running same query again and again. This can be handled by the cursor.
3. To declare a cursor simple start with writing a procedure, and in the select statement append "declare cursorname cursor for ", then open and close cursor.
4. The cursors are unidirectional
5. Cursors use actual live data from the tables.
6. We need to write open and close statement for cursors
7. In procedure we use set keyword, in cursor we use fetch cursorname into varname.

## Example :

	delimiter $$

	create procedure cursortest()
	begin

		declare the_email varchar(40);
		declare cur1 cursor for select email from users order by id;
		open cur1;
		fetch cur1 into the_email;
		close cur1;

		select the_email;

	end$$
	delimiter ;
	call cursortest();
	drop procedure cursortest;
	
## Example 2 : with continue handler we dnt need "begin" and "end"

	create table leads(id int auto_increment primary key, email varchar(40) not null);
	
	delimiter $$

	create procedure cursortest()
	begin

		declare the_email varchar(40);
		declare finished boolean default false;

		declare cur1 cursor for select email from users where active = true and registered > date(now()) - interval 1 year;
		
		declare continue handler for not found set finished := true;
		
		delete from leads;
		
		open cur1;
		
		the_loop: loop

			fetch cur1 into the_email;
			
			if finished then
				leave the_loop;
			end if;
			
			insert into leads (email) values (the_email);
		
		end loop the_loop;

		close cur1;

	end$$

	delimiter ;

## Switch Case in Cursor : (using when then in switch case)

	create table fruits(id int primary key, product varchar(40) not null);
	create table vegetables(id int primary key, product varchar(40) not null);
	create table bakery(id int primary key, product varchar(40) not null);

	select id, product, category from products order by id;

	show tables;

	delimiter $$

	create procedure filltables(out unassigned longtext)
	begin

		declare the_id int;
		declare the_product varchar(40);
		declare the_category enum('bakery', 'fruit', 'vegetable');
		declare finished boolean default false;

		declare cur cursor for select id, product, category from products order by id;
		
		declare continue handler for not found set finished := true;
		
		open cur;
		
		set unassigned := "";
		
		the_loop: loop
		
			fetch cur into the_id, the_product, the_category;
			
			if finished = true then
				leave the_loop;
			end if;
			
			case the_category
				when 'fruit' then
					insert into fruits (id, product) values (the_id, the_product);
				when 'vegetable' then
					insert into vegetables (id, product) values (the_id, the_product);
				when 'bakery' then
					insert into bakery (id, product) values (the_id, the_product);
				else
					set unassigned := concat(unassigned, the_product, ", ");
			end case;
		
		end loop;
		
		close cur;
		
	end$$

	delimiter ;
	
	call filltables(@unassigned);
	
	
	####################### SAMPLE Example#######################
	
	create table stars(id int primary key auto_increment, name varchar(40) not null);
	
	alter table stars add column born date;
	alter table starts add column died date;

	delimiter $$

	create procedure create_stars_with_dates()
	not deterministic ## tells my sql that how best to optimize the results
	begin

		declare the_noun varchar(20);
		declare the_adjective varchar(20);
		declare born_date date;
		declare died_date date;
		declare min_died date;
		declare max_died date;
		declare days_lifespan int;

		declare finished boolean default false;

		declare nouns_cursor cursor for select noun from words order by rand();
		declare adjectives_cursor cursor for select adjective from words order by rand();

		declare continue handler for not found set finished := true;

		open nouns_cursor;
		open adjectives_cursor;

		the_loop: loop

			fetch nouns_cursor into the_noun;
			fetch adjectives_cursor into the_adjective;

			if finished then
				leave the_loop;
			end if;

			-- Uppercase first letters
			set the_adjective = concat(ucase(left(the_adjective, 1)), substring(the_adjective, 2));
			set the_noun = concat(ucase(left(the_noun, 1)), substring(the_noun, 2));

			-- Figure out birth date; at least 20 years ago, and not more than 60 years before
			-- that (80 years total maximum)
			select date(now()) - interval 20 year - interval 365*60*rand() day into born_date;

			-- When was the earliest they could have died? At least 19 years after being born.
			select born_date + interval 19 year into min_died;

			set died_date := null;

			if rand() <= 0.4 then

				-- When was the latest they could have died? (Today)
				select date(now()) into max_died;

				-- Calculate a random fraction of the interval between the birth date
				-- and maximum death date.
				select datediff(max_died, min_died)*rand() into days_lifespan;

				-- Add this number of days to when they were born to get the death date.
				select born_date + interval 19 year + interval days_lifespan day into died_date;

			end if;

			insert into stars (name, born, died) values (concat(the_adjective, " ", the_noun), born_date, died_date);

		end loop;

		close nouns_cursor;
		close adjectives_cursor;

	end$$

	delimiter ;

	delete from stars;

	call create_stars_with_dates();
	drop procedure create_stars_with_dates;

	select from_days(datediff(died, born)) from stars where died is not null;


	select * from stars;